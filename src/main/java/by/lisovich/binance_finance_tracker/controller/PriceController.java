package by.lisovich.binance_finance_tracker.controller;

import by.lisovich.binance_finance_tracker.binance.dto.*;
import by.lisovich.binance_finance_tracker.controller.dto.PriceDto;
import by.lisovich.binance_finance_tracker.controller.dto.SymbolDto;
import by.lisovich.binance_finance_tracker.entity.PriceSnapshot;
import by.lisovich.binance_finance_tracker.entity.Symbol;
import by.lisovich.binance_finance_tracker.service.BinanceService;
import by.lisovich.binance_finance_tracker.service.PriceSnapshotService;
import by.lisovich.binance_finance_tracker.service.SymbolService;
import com.binance.connector.client.spot.rest.model.AggTradesResponse;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Positive;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api")
@Validated
public class PriceController {

    private final SymbolService symbolService;
    // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î
    private final PriceSnapshotService priceSnapshotService;
    // –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ –º–µ—Ç–æ–¥–∞–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å –Ω—É–∂–Ω–∏–º–∏ return-–∞–º–∏
    private final BinanceService binanceService;

    @GetMapping("/symbols")
    public ResponseEntity<List<SymbolDto>> allSymbols() {
        List<Symbol> symbols = symbolService.allSymbols();

        return ResponseEntity.ok(symbols.stream().map(SymbolDto::of).toList());
    }

    // –µ—Ç–æ—Ç –µ–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∏—á–µ–≥–æ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–¥–∞–µ—Ç
    @GetMapping("/prices/{symbol}/latest")
    public ResponseEntity<PriceDto> getLatestPrice(@PathVariable String symbol) {
        Symbol byFind = symbolService.findBySymbol(symbol);
        PriceSnapshot latestPrice = priceSnapshotService.findLatestPrice(byFind.getSymbol());
        return ResponseEntity.ok(PriceDto.of(latestPrice));
    }

    @GetMapping("/prices/{symbol}/agg-latest")
    public ResponseEntity<List<AggTradesResponseDto>> getLastAggTrades(@PathVariable String symbol,
                                                                       @RequestParam(defaultValue = "1") Integer limit) {
        AggTradesResponse aggTradesResponseInners = binanceService.aggTrades(symbol, limit);

        List<AggTradesResponseDto> listDto = AggTradesResponseDto.getListDto(symbol, symbol, aggTradesResponseInners);
        return ResponseEntity.ok(listDto);
    }

    @GetMapping("/prices/{symbol}/avg")
    public ResponseEntity<AvgPriceResponseDto> getAveragePrice(@PathVariable String symbol) {
        symbolService.findBySymbol(symbol);

        AvgPriceResponseDto avgPriceResponseDto = binanceService.retriveAvgPrice(symbol);
        return ResponseEntity.ok(avgPriceResponseDto);
    }

    /**
     * –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç Endpoint
     * GET /api/v3/depth ‚Äî —ç—Ç–æ endpoint Binance, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª—É–±–∏–Ω—É –æ—Ä–¥–µ—Ä–±—É–∫–∞ (order book depth).
     * üìò –û—Ä–¥–µ—Ä–±—É–∫ (Order Book) ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É (bids) –∏ –ø—Ä–æ–¥–∞–∂—É (asks) –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT).
     * üëâ –¢–æ –µ—Å—Ç—å —ç—Ç–æ—Ç endpoint –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –ø–æ –∫–∞–∫–∏–º —Ü–µ–Ω–∞–º –∏ –≤ –∫–∞–∫–∏—Ö –æ–±—ä—ë–º–∞—Ö —Ç—Ä–µ–π–¥–µ—Ä—ã —Ö–æ—Ç—è—Ç –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –∞–∫—Ç–∏–≤.
     * {
     *   "lastUpdateId": 1027024,
     *   "bids": [
     *     ["4.00000000", "431.00000000"]
     *   ],
     *   "asks": [
     *     ["4.00000200", "12.00000000"]
     *   ]
     * }
     * bids ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É (—Ü–µ–Ω–∞, –æ–±—ä—ë–º)
     * asks ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (—Ü–µ–Ω–∞, –æ–±—ä—ë–º)
     * –ö–∞–∫ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç—Ä–µ–π–¥–µ—Ä—ã
     * –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
     * –°–º–æ—Ç—Ä—è—Ç, –≥–¥–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω—ã –∫—Ä—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏ ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –≥–¥–µ –º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–ª–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã.
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
     * –ï—Å–ª–∏ –±–æ–ª—å—à–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É ‚Äî —Ä—ã–Ω–æ–∫ —Å–∫–ª–æ–Ω–µ–Ω –∫ —Ä–æ—Å—Ç—É.
     * –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É ‚Äî —Ä—ã–Ω–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º.
     * –ê–ª–≥–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –∏ –±–æ—Ç—ã
     * –ë–æ—Ç—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç —ç—Ç–æ—Ç endpoint, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –∫–∞–∫ –º–µ–Ω—è—é—Ç—Å—è –∑–∞—è–≤–∫–∏, –∏ –±—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å.
     * */
    @GetMapping("/prices/{symbol}/depth")
    public ResponseEntity<DepthResponseDto> getDepth(@PathVariable String symbol, @RequestParam(defaultValue = "100") String limit) {
        // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª–∞.
//        –≤–∏–∫–∏–¥–∞—î –ø–æ–º–∏–ª–∫—É SymbolNotFoundException(), —è–∫–∞ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≥–ª–æ–±–∞–ª—å–Ω–∏–º handleSymbolNotFoundException
        symbolService.findBySymbol(symbol);

        DepthResponseDto dept = binanceService.getDept(symbol, Integer.valueOf(limit));

        return ResponseEntity.ok(dept);
    }

/**
 * üß© 1. –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
 * –ú–µ—Ç–æ–¥
 * getApi().getTrades(symbol, limit);
 * –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ Binance Spot REST API –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É:
 * GET /api/v3/trades
 * –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫ (trades) –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "BNBUSDT".
 * –≠—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç ‚Äî –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
 * ‚öôÔ∏è 2. –ß—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–æ–¥
 * –û—Ç–≤–µ—Ç API ‚Äî —ç—Ç–æ JSON-–º–∞—Å—Å–∏–≤ –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Å–¥–µ–ª–∫—É, —Å–æ–≤–µ—Ä—à—ë–Ω–Ω—É—é –Ω–∞ —Å–ø–æ—Ç–æ–≤–æ–º —Ä—ã–Ω–∫–µ Binance.
 * –ü—Ä–∏–º–µ—Ä:
 * [
 *   {
 *     "id": 28457,
 *     "price": "4.00000100",
 *     "qty": "12.00000000",
 *     "quoteQty": "48.000012",
 *     "time": 1499865549590,
 *     "isBuyerMaker": true,
 *     "isBestMatch": true
 *   }
 * ]
 * –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π:
 * –ü–æ–ª–µ	–ó–Ω–∞—á–µ–Ω–∏–µ
 * id	–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏
 * price	–¶–µ–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Å–¥–µ–ª–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞
 * qty	–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BNB)
 * quoteQty	–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDT)
 * time	–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö UNIX)
 * isBuyerMaker	true, –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –±—ã–ª maker (–æ–Ω —Å—Ç–æ—è–ª –≤ —Å—Ç–∞–∫–∞–Ω–µ), false, –µ—Å–ª–∏ taker
 * isBestMatch	–£–∫–∞–∑—ã–≤–∞–µ—Ç, –±—ã–ª–∞ –ª–∏ —Å–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ –Ω–∞–∏–ª—É—á—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ü–µ–Ω–µ
 * üß† 3. –ì–¥–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ
 * –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ç—Ä—ë—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö:
 * üîπ A. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä—ã–Ω–∫–∞ (Market Data)
 * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã —Å–¥–µ–ª–æ–∫ (trade tape) ‚Äî –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
 * –ü—Ä–∏–º–µ—Ä: –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Binance —Å–ø—Ä–∞–≤–∞ –æ—Ç –≥—Ä–∞—Ñ–∏–∫–∞, –≥–¥–µ –±–µ–≥—É—Ç –∫—Ä–∞—Å–Ω—ã–µ/–∑–µ–ª—ë–Ω—ã–µ —Å—Ç—Ä–æ—á–∫–∏.
 * –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞:
 * –∫–æ–≥–¥–∞ —Å–¥–µ–ª–∫–∏ –∏–¥—É—Ç —á–∞—Å—Ç–æ –∏ —Å –±–æ–ª—å—à–∏–º –æ–±—ä—ë–º–æ–º ‚Äî —Ä—ã–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω; –∫–æ–≥–¥–∞ —Ä–µ–¥–∫–æ ‚Äî –Ω–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å.
 * üîπ B. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
 * –¢—Ä–µ–π–¥–µ—Ä—ã –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–∞–Ω–Ω—ã–µ getTrades –¥–ª—è:
 * –†–∞—Å—á—ë—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä—ë–º–∞ —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç;
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤:
 * –µ—Å–ª–∏ isBuyerMaker = true —á–∞—â–µ ‚Äî –∑–Ω–∞—á–∏—Ç, –ø—Ä–æ–¥–∞–≤—Ü—ã –∞–∫—Ç–∏–≤–Ω–µ–µ, —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –ø–∞–¥–∞—Ç—å;
 * –ü–æ–∏—Å–∫–∞ –≤—Å–ø–ª–µ—Å–∫–æ–≤ –æ–±—ä—ë–º–æ–≤ (volume spikes) ‚Äî —Å–∏–≥–Ω–∞–ª –æ –≤–æ–∑–º–æ–∂–Ω–æ–º —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ –∏–ª–∏ –ø—Ä–æ–±–æ–µ;
 * –ê–Ω–∞–ª–∏–∑–∞ –∏–º–ø—É–ª—å—Å–æ–≤ ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–æ–∫ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.
 * üîπ C. –ê–ª–≥–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –∏ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥
 * –î–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤ –¥–∞–Ω–Ω—ã–µ getTrades —Å–ª—É–∂–∞—Ç:
 *
 * –ò—Å—Ç–æ—á–Ω–∏–∫–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∏–∫—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–π —Ä—ã–Ω–∫–∞;
 * –í–≤–æ–¥–æ–º –¥–ª—è –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≥–Ω–æ–∑ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è);
 * –ü—Ä–æ–≤–µ—Ä–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥);
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ —Ä—ã–Ω–∫–∞.
 * üìà 4. –ß–µ–º –ø–æ–ª–µ–∑–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–π–¥–µ—Ä–∞–º
 * –ü–æ–ª—å–∑–∞	–ü—Ä–∏–º–µ—Ä
 * –ò–∑–º–µ—Ä–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å	–ß–∞—Å—Ç—ã–µ —Å–¥–µ–ª–∫–∏ ‚Üí –≤—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
 * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π/–ø—Ä–æ–¥–∞–≤—Ü–æ–≤	–ü—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —Ä–æ—Å—Ç
 * –°–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–µ–∞–∫—Ü–∏–µ–π –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏	–ü–æ—Å–ª–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏ ‚Äî —Ä–µ–∑–∫–æ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è —Å–¥–µ–ª–∫–∏
 * –û—Ü–µ–Ω–∏—Ç—å –≥–ª—É–±–∏–Ω—É –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π	–ï—Å–ª–∏ —Å–¥–µ–ª–∫–∏ –∏–¥—É—Ç –ø–æ –≤—Å–µ–º —Ü–µ–Ω–∞–º –±—ã—Å—Ç—Ä–æ ‚Äî –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–∞–µ—Ç—Å—è
 * üîç 5. –ö–∞–∫ —Ç—Ä–µ–π–¥–µ—Ä –¥–µ–ª–∞–µ—Ç –≤—ã–≤–æ–¥—ã
 * –ù–∞–ø—Ä–∏–º–µ—Ä, —Ç—Ä–µ–π–¥–µ—Ä –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö getTrades –∏ –∑–∞–º–µ—á–∞–µ—Ç:
 * –ó–∞ 10 —Å–µ–∫—É–Ω–¥ ‚Äî 200 —Å–¥–µ–ª–æ–∫ –ø–æ–¥—Ä—è–¥, –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ isBuyerMaker=false
 * (—Ç.–µ. –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª–Ω—è—é—Ç –ø–æ —Ä—ã–Ω–∫—É).
 * ‚ûú —ç—Ç–æ –±—ã—á–∏–π –∏–º–ø—É–ª—å—Å, –≤–æ–∑–º–æ–∂–µ–Ω –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã.
 * –ï—Å–ª–∏ –∂–µ —Å–¥–µ–ª–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º isBuyerMaker=true, –∏ —Ü–µ–Ω–∞ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞–µ—Ç—Å—è ‚Äî
 * ‚ûú —Ä—ã–Ω–æ–∫ –º–µ–¥–≤–µ–∂–∏–π, –∏–¥—ë—Ç —Å–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–π.
 * üíª 6. –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ (–ø—Ä–∏–º–µ—Ä –≤ –∫–æ–¥–µ)
 * –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
 * ApiResponse<GetTradesResponse> response = getApi().getTrades("BTCUSDT", 1000);
 * List<Trade> trades = response.getData().getTrades();
 * long buyCount = trades.stream().filter(t -> !t.isBuyerMaker()).count();
 * long sellCount = trades.stream().filter(Trade::isBuyerMaker).count();
 * if (buyCount > sellCount * 1.2) {
 *     System.out.println("–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç ‚Äî —Ä—ã–Ω–æ–∫ –º–æ–∂–µ—Ç —Ä–∞—Å—Ç–∏");
 * } else if (sellCount > buyCount * 1.2) {
 *     System.out.println("–ü—Ä–æ–¥–∞–≤—Ü—ã –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç ‚Äî —Ä—ã–Ω–æ–∫ –º–æ–∂–µ—Ç —Å–Ω–∏–∂–∞—Ç—å—Å—è");
 * } else {
 *     System.out.println("–ë–∞–ª–∞–Ω—Å —Å–∏–ª ‚Äî –±–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥");
 * }
 * üìä 7. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º 1000 —Å–¥–µ–ª–æ–∫;
 * –¢–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–¥–µ–ª–∫–∏, –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ –ø—Ä–æ—à–ª—ã–µ –¥–Ω–∏;
 * –î–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç ‚Äî /api/v3/historicalTrades.
 * üß≠ 8. –ò—Ç–æ–≥–æ
 * –ü–∞—Ä–∞–º–µ—Ç—Ä	–ó–Ω–∞—á–µ–Ω–∏–µ
 * –ú–µ—Ç–æ–¥	GET /api/v3/trades
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ	–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ —Ä—ã–Ω–∫–µ
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è	–ê–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –ø–æ—Ç–æ–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤, —Å–∏–ª—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π/–ø—Ä–æ–¥–∞–≤—Ü–æ–≤
 * –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö	–†–µ–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ	–ê–ª–≥–æ—Ç—Ä–µ–π–¥–∏–Ω–≥, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è, —Å–∏–≥–Ω–∞–ª—ã
 * –í—ã–≤–æ–¥—ã	–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
 * –•–æ—á–µ—à—å, —è –ø–æ–∫–∞–∂—É, –∫–∞–∫ –º–æ–∂–Ω–æ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫ —Å–¥–µ–ª–æ–∫ (getTrades) –≤ –≤–∏–¥–µ ¬´–ª–µ–Ω—Ç—ã¬ª –∏–ª–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Java (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é Swing –∏–ª–∏ JavaFX)?
 * –¢–∞–∫ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ, –∫–∞–∫ —Ç—Ä–µ–π–¥–µ—Ä "—á—É–≤—Å—Ç–≤—É–µ—Ç" —Ä—ã–Ω–æ–∫ —á–µ—Ä–µ–∑ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ.
 * */
    @GetMapping("/prices/{symbol}/trades")
    public ResponseEntity<List<TradesResponseDto>> getTrades(@PathVariable String symbol,
                                                             @RequestParam(defaultValue = "500") String limit) {
        symbolService.findBySymbol(symbol);

        List<TradesResponseDto> trades = binanceService.getTrades(symbol, Integer.valueOf(limit));

        return ResponseEntity.ok(trades);
    }

    @GetMapping("/prices/{symbol}/historical-trades")
    public ResponseEntity<List<HistoricalTradesResponseDto>> getHistoricalTrades(@PathVariable String symbol,
                                                                                 @RequestParam(defaultValue = "500") @Min(1) @Max(1000) Integer limit,
                                                                                 @RequestParam(defaultValue = "1") @Positive Long fromId) {
        symbolService.findBySymbol(symbol);
        List<HistoricalTradesResponseDto> historicalTrades = binanceService.getHistoricalTrades(symbol, limit, fromId);

        return ResponseEntity.ok(historicalTrades);
    }

}
