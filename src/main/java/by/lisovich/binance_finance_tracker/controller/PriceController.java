package by.lisovich.binance_finance_tracker.controller;

import by.lisovich.binance_finance_tracker.binance.dto.AggTradesResponseDto;
import by.lisovich.binance_finance_tracker.binance.dto.AvgPriceResponseDto;
import by.lisovich.binance_finance_tracker.binance.dto.DepthResponseDto;
import by.lisovich.binance_finance_tracker.controller.dto.PriceDto;
import by.lisovich.binance_finance_tracker.controller.dto.SymbolDto;
import by.lisovich.binance_finance_tracker.entity.PriceSnapshot;
import by.lisovich.binance_finance_tracker.entity.Symbol;
import by.lisovich.binance_finance_tracker.service.BinanceService;
import by.lisovich.binance_finance_tracker.service.PriceSnapshotService;
import by.lisovich.binance_finance_tracker.service.SymbolService;
import com.binance.connector.client.spot.rest.model.AggTradesResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api")
public class PriceController {

    private final SymbolService symbolService;
    // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î
    private final PriceSnapshotService priceSnapshotService;
    // –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ –º–µ—Ç–æ–¥–∞–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å –Ω—É–∂–Ω–∏–º–∏ return-–∞–º–∏
    private final BinanceService binanceService;

    @GetMapping("/symbols")
    public ResponseEntity<List<SymbolDto>> allSymbols() {
        List<Symbol> symbols = symbolService.allSymbols();

        return ResponseEntity.ok(symbols.stream().map(SymbolDto::of).toList());
    }

    // –µ—Ç–æ—Ç –µ–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∏—á–µ–≥–æ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–¥–∞–µ—Ç
    @GetMapping("/prices/{symbol}/latest")
    public ResponseEntity<PriceDto> getLatestPrice(@PathVariable String symbol) {
        Symbol byFind = symbolService.findBySymbol(symbol);
        PriceSnapshot latestPrice = priceSnapshotService.findLatestPrice(byFind.getSymbol());
        return ResponseEntity.ok(PriceDto.of(latestPrice));
    }

    @GetMapping("/prices/{symbol}/agg-latest")
    public ResponseEntity<List<AggTradesResponseDto>> getLastAggTrades(@PathVariable String symbol,
                                                                       @RequestParam(defaultValue = "1") Integer limit) {
        AggTradesResponse aggTradesResponseInners = binanceService.aggTrades(symbol, limit);

        List<AggTradesResponseDto> listDto = AggTradesResponseDto.getListDto(symbol, symbol, aggTradesResponseInners);
        return ResponseEntity.ok(listDto);
    }

    @GetMapping("/prices/{symbol}/avg")
    public ResponseEntity<AvgPriceResponseDto> getAveragePrice(@PathVariable String symbol) {
        symbolService.findBySymbol(symbol);

        AvgPriceResponseDto avgPriceResponseDto = binanceService.retriveAvgPrice(symbol);
        return ResponseEntity.ok(avgPriceResponseDto);
    }

    /**
     * –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç Endpoint
     * GET /api/v3/depth ‚Äî —ç—Ç–æ endpoint Binance, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª—É–±–∏–Ω—É –æ—Ä–¥–µ—Ä–±—É–∫–∞ (order book depth).
     * üìò –û—Ä–¥–µ—Ä–±—É–∫ (Order Book) ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É (bids) –∏ –ø—Ä–æ–¥–∞–∂—É (asks) –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT).
     * üëâ –¢–æ –µ—Å—Ç—å —ç—Ç–æ—Ç endpoint –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –ø–æ –∫–∞–∫–∏–º —Ü–µ–Ω–∞–º –∏ –≤ –∫–∞–∫–∏—Ö –æ–±—ä—ë–º–∞—Ö —Ç—Ä–µ–π–¥–µ—Ä—ã —Ö–æ—Ç—è—Ç –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –∞–∫—Ç–∏–≤.
     * {
     *   "lastUpdateId": 1027024,
     *   "bids": [
     *     ["4.00000000", "431.00000000"]
     *   ],
     *   "asks": [
     *     ["4.00000200", "12.00000000"]
     *   ]
     * }
     * bids ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É (—Ü–µ–Ω–∞, –æ–±—ä—ë–º)
     * asks ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (—Ü–µ–Ω–∞, –æ–±—ä—ë–º)
     *
     * –ö–∞–∫ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç—Ä–µ–π–¥–µ—Ä—ã
     *
     * –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
     * –°–º–æ—Ç—Ä—è—Ç, –≥–¥–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω—ã –∫—Ä—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏ ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –≥–¥–µ –º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–ª–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã.
     *
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
     * –ï—Å–ª–∏ –±–æ–ª—å—à–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É ‚Äî —Ä—ã–Ω–æ–∫ —Å–∫–ª–æ–Ω–µ–Ω –∫ —Ä–æ—Å—Ç—É.
     * –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É ‚Äî —Ä—ã–Ω–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º.
     *
     * –ê–ª–≥–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –∏ –±–æ—Ç—ã
     * –ë–æ—Ç—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç —ç—Ç–æ—Ç endpoint, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –∫–∞–∫ –º–µ–Ω—è—é—Ç—Å—è –∑–∞—è–≤–∫–∏, –∏ –±—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å.
     * */
    @GetMapping("/prices/{symbol}/depth")
    public ResponseEntity<DepthResponseDto> getDepth(@PathVariable String symbol, @RequestParam(defaultValue = "100") String limit) {

        DepthResponseDto dept = binanceService.getDept(symbol, Integer.valueOf(limit));

        return ResponseEntity.ok(dept);
    }


}
